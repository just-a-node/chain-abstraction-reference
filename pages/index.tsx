import { ConnectButton } from '@rainbow-me/rainbowkit';
import { useEffect, useState } from 'react';
import type { NextPage } from 'next';
import Head from 'next/head';
import styles from '../styles/Home.module.css';
import ContractService from '../services/contractService';
import WalletService from '../services/walletService';
import ConnextService from '../services/connextService';
import { useEthersProvider, useEthersSigner } from '../ethers/ethersAdapters'

interface HomePageProps {
  walletClient: any;
}

const HomePage: NextPage = (pageProps) => {
  const [relayerFee, setRelayerFee] = useState<string | undefined>(undefined);

  const [contractService, setContractService] = useState<ContractService | undefined>(undefined);
  const [walletService, setWalletService] = useState<WalletService | undefined>(undefined);
  const [connextService, setConnextService] = useState<ConnextService | undefined>(undefined);
  const [signerAddress, setSignerAddress] = useState<string | undefined>(undefined);

  const provider = useEthersProvider();
  const signer = useEthersSigner();

  useEffect(() => {
    const initServices = async () => {
      if (signer && provider) {
        const signerAddress = await signer.getAddress();
        setSignerAddress(signerAddress);

        const contractService = new ContractService(provider);
        setContractService(contractService);

        const walletService = new WalletService(contractService, provider, signer);
        setWalletService(walletService);

        if (signerAddress) {
          const sdkConfig = {
            signerAddress,
            network: "testnet" as const,
            chains: {
              // TODO: get chains
            },
          };
          const connextServiceInstance = new ConnextService(walletService, contractService, sdkConfig);
          setConnextService(connextServiceInstance);
        }
      }
    };

    initServices();
  }, [signer, provider]);

  const handleGreet = (originDomain: string, destinationDomain: string) => {
    (async () => {
      if (connextService) {
        try {
          const fee = await connextService.estimateRelayerFee(originDomain, destinationDomain);
          setRelayerFee(fee);
          console.log(relayerFee);
        } catch (error) {
          console.error('Failed to fetch relayer fee', error);
        }
      } else {
        console.log('Connext service not initialized');
      }
    })();
  };

  return (
    <div className={styles.container}>
      <Head>
        <title>Connext Next JS</title>
        <meta content="Generated by @connext/sdk" name="description" />
        <link href="/favicon.ico" rel="icon" />
      </Head>
      <main className={styles.main}>
        <div className={styles.flexDisplay}>
          <h2>Connext Chain Abstraction Reference</h2>
          <ConnectButton />
        </div>
        <div className={styles.center}>
          <button className={styles.button} onClick={() => handleGreet("1111", "2222")}>
            Greet With Tokens
          </button>
          {/* {tracker && (
            <p>
              You can track you xcall{" "}
              <a target="_blank" href={tracker} rel="noreferrer">
                here.
              </a>
            </p>
          )} */}
        </div>
        <div>

        </div>
      </main>
      <footer className={styles.footer}>
        For more information refer to the official Connext
        documentation{" "}
        <a
          href="https://docs.connext.network/"
          target="_blank"
          rel="noreferrer"
        >
          here
        </a>
        .
      </footer>
    </div>
  );
};

export default HomePage;
